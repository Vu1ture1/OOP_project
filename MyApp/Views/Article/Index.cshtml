@using Microsoft.AspNetCore.Mvc;
@using MyApp.DataBaseFolder;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Authentication.Cookies;
@using MyApp.Models;
@using Microsoft.AspNetCore.Razor.Language.Intermediate;
@using Microsoft.EntityFrameworkCore;

@{

    ViewData["Title"] = "Home Page";

    if (Context.User.Identity.IsAuthenticated == false)
    {
        Layout = "_Layout";
    }
    else
    {
        List<Claim> cl = Context.User.Claims.ToList();

        if (cl[1].Value == "user")
        {
            Layout = "/Views/Shared/layouts/_Layout_user.cshtml";
        }
        else if (cl[1].Value == "modder")
        {
            Layout = "/Views/Shared/layouts/_Layout_modder.cshtml";
        }
        else if (cl[1].Value == "admin")
        {
            Layout = "/Views/Shared/layouts/_Layout_admin.cshtml";
        }
    }
}

<script src="https://cdn.ckeditor.com/ckeditor5/41.2.1/classic/ckeditor.js" ></script>

<head>
    <style>
        body {
            padding-top: 70px; /* Устанавливаем отступ со всех сторон */
            
        }

        .form-control {
            width: 350px; /* Фиксированная ширина */
            max-width: 100%; /* Ширина не будет превышать 100% от родительского элемента */
            display: block;
            
            margin-right: 10px;
            margin-bottom: 20px;
        }


        .default-b {
            border: 2px solid transparent; /* Прозрачная граница в обычном состоянии */
            background-color: transparent; /* Прозрачный фон в обычном состоянии */
            color: #000; /* Цвет текста */
            padding: 5px 10px; /* Отступы вокруг текста */
            font-size: 20px; /* Размер шрифта */
            transition: all 0.1s ease; /* Плавность перехода */
            margin-top: 20px;
            margin-bottom: 20px;

        }

            .default-b:hover {
                border-color: #000; /* Черная граница при наведении */
                background-color: rgba(0, 0, 0, 0.1); /* Затемнение фона при наведении */
                transform: translate(1px, 1px);
            }

        .form-signin > * {
            margin-bottom: 10px; /* Добавляет отступ снизу для всех элементов внутри .form-signin */
        }

        .info-label {
            display: inline-block; /* Делаем элементы строчно-блочными */
            font-weight: bold;
            width: 900px; /* Фиксированная ширина для меток */
            text-align: left; /* Выравниваем текст меток по правому краю */
            margin-right: 10px; /* Отступ справа от метки до поля */
            font-size: 20px;
            margin-bottom: 20px;
        }

        

        .profile-container {
            width: auto;
            height: auto;
            border: 1px solid #ccc;
            padding: 20px;
            text-align: left; /* Выравниваем текст по левому краю */
            margin: 0 auto;
            margin-right: 30px;
        }

        .text_area {
            margin-top: 20px;
        }

        .custom-file-upload {
            border: 2px solid transparent; /* Прозрачная граница в обычном состоянии */
            display: inline-block;
            background-color: transparent; /* Прозрачный фон в обычном состоянии */
            color: #000; /* Цвет текста */
            padding: 5px 10px; /* Отступы вокруг текста */
            font-size: 20px; /* Размер шрифта */
            transition: all 0.1s ease; /* Плавность перехода */
            
            width: 100%; /* Фиксированная ширина для меток */
            max-width: 200px;
            min-width: 100px;

            margin-bottom: 20px;
            
        }

            .custom-file-upload:hover {
                border-color: #000; /* Черная граница при наведении */
                background-color: rgba(0, 0, 0, 0.1); /* Затемнение фона при наведении */
                transform: translate(1px, 1px);
            }

        .divv{
            display: block;
        }
    </style>
</head>

<body>
    <div class="profile-container">
        <form asp-action="CreateRequest" method="post" enctype="multipart/form-data">
            <span class="info-label">Введите темы статьи:</span>
            @* <input name="categories" type="text" id="inputcat" class="form-control" placeholder="Категории статьи через ," required> *@
            <select class="form-control" name="categories" required>
                <option value="Нет темы">Нет темы</option>
                <option value="Спорт">Спорт</option>
                <option value="Наука">Наука</option>
                <option value="Еда">Еда</option>
                <option value="Культура">Культура</option>
                <option value="Экономика">Экономика</option>
                <option value="Технологии">Технологии</option>
                <option value="Техника">Техника</option>
                <option value="Гейминг">Гейминг</option>
                <option value="Путешествия">Путешествия</option>
                <option value="Красота и стиль">Красота и стиль</option>
                <option value="Животные">Животные</option>
            </select>

            <span class="info-label">Введите заголовок статьи:</span>
            <input name="title" type="text" id="inputName" class="form-control" placeholder="Название статьи, минимум 10 символов" pattern=".{10,}" required>
            <span class="info-label">Загрузите обложку статьи(разрешение: 1920x1080):</span>

            <div class="divv">
                <label for="fileUpload" class="custom-file-upload">
                    <i class="fa-solid fa-image"></i> Загрузить файл
                </label>
                <input type="file" id="fileUpload" name="fileUpload" accept=".png" style="display: none;"/>
                <span class="" id="fileName"></span>
            </div>

            <span class="info-label">Содержимое статьи:</span>
            <textarea class="form-control" name="input" id="myeditor"></textarea>

            <button class="default-b text-dark" type="submit" value="send"><i class="fa-solid fa-plus"></i> Создать</button>
        </form>
    </div>
</body>


<script>
    document.getElementById('fileUpload').addEventListener('change', function (e) {
        var file = this.files[0];
        var img = new Image();
        var form = e.target.form;

        img.onload = function () {
            var width = this.width;
            var height = this.height;

            if (width != 1920 && height != 1080) {
                document.getElementById('fileName').textContent = 'Разрешение изображения не равно 1920x1080, поэтому текущее изображение будет заменено на изображение по умолчанию.';
            }
        };

        img.src = URL.createObjectURL(file);
    });
</script>

<script>
    // JavaScript для отображения имени файла
    document.getElementById('fileUpload').addEventListener('change', function () {
        // Получаем имя файла из пути файла
        var fileName = "Имя файла: " + this.value.split('\\').pop();
        // Обновляем текст элемента с именем файла
        document.getElementById('fileName').textContent = fileName;
    });

</script>

<script>
    class MyUploadAdapter {
        constructor(loader) {
            // The file loader instance to use during the upload. It sounds scary but do not
            // worry — the loader will be passed into the adapter later on in this guide.
            this.loader = loader;
        }

        // Starts the upload process.
        upload() {
            return this.loader.file
                .then(file => new Promise((resolve, reject) => {
                    this._initRequest();
                    this._initListeners(resolve, reject, file);
                    this._sendRequest(file);
                }));
        }

        // Aborts the upload process.
        abort() {
            if (this.xhr) {
                this.xhr.abort();
            }
        }

        // Initializes the XMLHttpRequest object using the URL passed to the constructor.
        _initRequest() {
            const xhr = this.xhr = new XMLHttpRequest();

            // Note that your request may look different. It is up to you and your editor
            // integration to choose the right communication channel. This example uses
            // a POST request with JSON as a data structure but your configuration
            // could be different.
            xhr.open('POST', '@Url.Action("UploadImage", "Article")', true);
            xhr.responseType = 'json';
        }

        // Initializes XMLHttpRequest listeners.
        _initListeners(resolve, reject, file) {
            const xhr = this.xhr;
            const loader = this.loader;
            const genericErrorText = `Couldn't upload file: ${file.name}.`;

            xhr.addEventListener('error', () => reject(genericErrorText));
            xhr.addEventListener('abort', () => reject());
            xhr.addEventListener('load', () => {
                const response = xhr.response;

                // This example assumes the XHR server's "response" object will come with
                // an "error" which has its own "message" that can be passed to reject()
                // in the upload promise.
                //
                // Your integration may handle upload errors in a different way so make sure
                // it is done properly. The reject() function must be called when the upload fails.
                if (!response || response.error) {
                    return reject(response && response.error ? response.error.message : genericErrorText);
                }

                // If the upload is successful, resolve the upload promise with an object containing
                // at least the "default" URL, pointing to the image on the server.
                // This URL will be used to display the image in the content. Learn more in the
                // UploadAdapter#upload documentation.
                resolve({
                    default: response.url
                });
            });

            // Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded
            // properties which are used e.g. to display the upload progress bar in the editor
            // user interface.
            if (xhr.upload) {
                xhr.upload.addEventListener('progress', evt => {
                    if (evt.lengthComputable) {
                        loader.uploadTotal = evt.total;
                        loader.uploaded = evt.loaded;
                    }
                });
            }
        }

        // Prepares the data and sends the request.
        _sendRequest(file) {
            // Prepare the form data.
            const data = new FormData();

            data.append('upload', file);

            // Important note: This is the right place to implement security mechanisms
            // like authentication and CSRF protection. For instance, you can use
            // XMLHttpRequest.setRequestHeader() to set the request headers containing
            // the CSRF token generated earlier by your application.

            // Send the request.
            this.xhr.send(data);
        }
    }

    function MyCustomUploadAdapterPlugin(editor) {
        editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
            // Configure the URL to the upload script in your backend here!
            return new MyUploadAdapter(loader);
        };
    }

    
    
    ClassicEditor
        .create(document.querySelector('#myeditor'), {
            extraPlugins: [MyCustomUploadAdapterPlugin],
        })
        .catch(error => {
            console.error(error);
        });
</script>

@* <div class="profile-container">
        <form asp-action="CreateRequest" method="post">
            <span class="info-label">Введите темы статьи:</span>
            <input name="categories" type="text" id="inputcat" class="form-control" placeholder="Categories sep with ','" required>
            <span class="info-label">Введите заголовок статьи:</span>
            <input name="title" type="text" id="inputName" class="form-control" placeholder="Article name" required>
            <span class="info-label">Содержимое статьи:</span>
            <textarea class="form-control" name="input" id="myeditor"></textarea>

            <button class="default-b text-dark" type="submit" value="send">Создать</button>
        </form>
    </div> *@

@* <form asp-action="cringe" method="post">
Title of article:
<textarea class="form-control" name="title"></textarea>
Context:
<textarea class="form-control" name="input" id="myeditor"></textarea>

<input type="submit" value="send"></input>




</form> *@
